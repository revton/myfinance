[project]
name = "myfinance"
version = "0.1.0"
description = "Aplicação de controle financeiro pessoal"
authors = [
    {name = "Revton", email = "revton@example.com"}
]
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "fastapi==0.104.1",
    "uvicorn[standard]==0.24.0",
    "supabase==2.0.2",
    "pydantic==2.5.3",
    "python-dotenv==1.0.0",
    "alembic",
    "psycopg2-binary",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "httpx>=0.24.1",
    "email-validator>=2.2.0",
    "bcrypt>=4.3.0",
    "pytz",
    "PyJWT",
    "pytest-cov",
]

[project.optional-dependencies]
backend = [
    "fastapi==0.104.1",
    "uvicorn[standard]==0.24.0",
    "supabase==2.0.2",
    "pydantic==2.5.3",
    "python-dotenv==1.0.0",
    "alembic==1.13.1",
    "psycopg2-binary==2.9.9"
]
docs = [
    "mkdocs==1.5.3",
    "mkdocs-material==9.4.8"
]
dev = [
    "invoke",
    "python-dotenv==1.0.0",
    "pytest==8.4.1",
    "pytest-cov==6.2.1",
    "alembic==1.13.1",
    "psycopg2-binary==2.9.9"
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.pytest.ini_options]
pythonpath = ["src"]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html:coverage",
    "--cov-report=xml:coverage.xml"
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]
