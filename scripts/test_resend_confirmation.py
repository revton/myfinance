#!/usr/bin/env python3
"""
Script para testar o reenvio de email de confirma√ß√£o via API
Execute: python scripts/test_resend_confirmation.py
"""

import os
import asyncio
import httpx
from dotenv import load_dotenv

# Carregar vari√°veis de ambiente
load_dotenv()

async def test_resend_confirmation(email: str):
    """
    Testa o reenvio de email de confirma√ß√£o
    """
    try:
        # Configura√ß√µes do Supabase
        supabase_url = os.getenv("SUPABASE_URL")
        supabase_key = os.getenv("SUPABASE_ANON_KEY")
        
        if not supabase_url or not supabase_key:
            print("‚ùå Erro: Configura√ß√£o do Supabase n√£o encontrada")
            print("   Verifique as vari√°veis SUPABASE_URL e SUPABASE_ANON_KEY no .env")
            return
        
        print(f"üîç Testando reenvio de confirma√ß√£o para: {email}")
        print(f"   Supabase URL: {supabase_url}")
        
        # Fazer requisi√ß√£o para a API de reenvio de confirma√ß√£o
        async with httpx.AsyncClient() as client:
            response = await client.post(
                f"{supabase_url}/auth/v1/resend",
                headers={
                    "apikey": supabase_key,
                    "Content-Type": "application/json"
                },
                json={
                    "type": "signup",
                    "email": email
                }
            )
            
            print(f"   Status Code: {response.status_code}")
            
            if response.status_code == 200:
                print("‚úÖ Email de confirma√ß√£o reenviado com sucesso!")
                print("   Verifique sua caixa de entrada e spam")
            elif response.status_code == 404:
                print("‚ùå Usu√°rio n√£o encontrado com este email")
            elif response.status_code == 400:
                error_data = response.json()
                error_message = error_data.get("error_description", "").lower()
                if "already confirmed" in error_message:
                    print("‚ÑπÔ∏è Email j√° foi confirmado")
                else:
                    print(f"‚ùå Erro ao reenviar email: {error_data.get('error_description', 'Erro desconhecido')}")
            else:
                print(f"‚ùå Erro inesperado: Status {response.status_code}")
                print(f"   Response: {response.text}")
                
    except Exception as e:
        print(f"‚ùå Erro interno: {str(e)}")

async def test_api_endpoint(email: str):
    """
    Testa o endpoint da API local para reenvio de confirma√ß√£o
    """
    try:
        api_url = "http://localhost:8002/auth/resend-confirmation"
        
        print(f"üîç Testando endpoint local: {api_url}")
        
        async with httpx.AsyncClient() as client:
            response = await client.post(
                api_url,
                json={"email": email}
            )
            
            print(f"   Status Code: {response.status_code}")
            
            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ Sucesso: {result.get('message', 'Email reenviado')}")
            else:
                error_data = response.json()
                print(f"‚ùå Erro: {error_data.get('detail', 'Erro desconhecido')}")
                
    except Exception as e:
        print(f"‚ùå Erro ao testar endpoint local: {str(e)}")

async def main():
    """
    Fun√ß√£o principal
    """
    print("üìß Teste de Reenvio de Email de Confirma√ß√£o")
    print("=" * 50)
    
    # Email para testar (modifique conforme necess√°rio)
    email = "revtonbr@gmail.com"
    
    print(f"üéØ Email de teste: {email}")
    print()
    
    # Teste 1: Reenvio direto via Supabase
    print("1Ô∏è‚É£ Testando reenvio direto via Supabase...")
    await test_resend_confirmation(email)
    print()
    
    # Teste 2: Reenvio via API local
    print("2Ô∏è‚É£ Testando reenvio via API local...")
    await test_api_endpoint(email)
    print()
    
    print("üìã Pr√≥ximos passos:")
    print("   1. Verifique sua caixa de entrada")
    print("   2. Verifique a pasta de spam")
    print("   3. Se n√£o receber, verifique configura√ß√µes de SMTP no Supabase")
    print("   4. Use o script force_confirm_email.sql se necess√°rio")

if __name__ == "__main__":
    asyncio.run(main()) 