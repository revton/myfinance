#!/bin/bash

# Script para testar GitHub Actions localmente (sem act)
# Alternativa para quando o act-cli n√£o est√° dispon√≠vel

set -e

echo "üöÄ MyFinance - Teste Local de GitHub Actions (Alternativo)"
echo "=========================================================="

# Fun√ß√£o para mostrar ajuda
show_help() {
    echo "Uso: $0 [OP√á√ÉO]"
    echo ""
    echo "Op√ß√µes:"
    echo "  backend     Testar apenas backend (Python/FastAPI)"
    echo "  frontend    Testar apenas frontend (React/Node.js)"
    echo "  deploy      Testar apenas deploy (Vercel)"
    echo "  all         Testar tudo"
    echo "  help        Mostrar esta ajuda"
    echo ""
    echo "Exemplos:"
    echo "  $0 backend"
    echo "  $0 frontend"
    echo "  $0 deploy"
    echo "  $0 all"
}

# Fun√ß√£o para testar backend
test_backend() {
    echo "üß™ Testando Backend..."
    echo "üìÅ Verificando estrutura do projeto..."
    
    # Verificar se os arquivos principais existem
    if [ ! -f "src/main.py" ]; then
        echo "‚ùå src/main.py n√£o encontrado"
        return 1
    fi
    
    if [ ! -f "requirements.txt" ]; then
        echo "‚ùå requirements.txt n√£o encontrado"
        return 1
    fi
    
    echo "‚úÖ Estrutura do projeto OK"
    
    # Verificar se Python est√° dispon√≠vel
    if ! command -v python &> /dev/null && ! command -v python3 &> /dev/null; then
        echo "‚ùå Python n√£o encontrado"
        return 1
    fi
    
    echo "üêç Python encontrado"
    
    # Verificar se pip est√° dispon√≠vel
    if ! command -v pip &> /dev/null && ! command -v pip3 &> /dev/null; then
        echo "‚ùå pip n√£o encontrado"
        return 1
    fi
    
    echo "üì¶ pip encontrado"
    
    # Verificar se os testes existem
    if [ ! -d "tests" ]; then
        echo "‚ö†Ô∏è  Diret√≥rio tests n√£o encontrado"
    else
        echo "‚úÖ Diret√≥rio tests encontrado"
    fi
    
    echo "‚úÖ Backend - Verifica√ß√µes b√°sicas conclu√≠das"
}

# Fun√ß√£o para testar frontend
test_frontend() {
    echo "üß™ Testando Frontend..."
    echo "üìÅ Verificando estrutura do frontend..."
    
    # Verificar se o diret√≥rio frontend existe
    if [ ! -d "frontend" ]; then
        echo "‚ùå Diret√≥rio frontend n√£o encontrado"
        return 1
    fi
    
    echo "‚úÖ Diret√≥rio frontend encontrado"
    
    # Verificar se package.json existe
    if [ ! -f "frontend/package.json" ]; then
        echo "‚ùå frontend/package.json n√£o encontrado"
        return 1
    fi
    
    echo "‚úÖ package.json encontrado"
    
    # Verificar se Node.js est√° dispon√≠vel
    if ! command -v node &> /dev/null; then
        echo "‚ùå Node.js n√£o encontrado"
        return 1
    fi
    
    echo "üü¢ Node.js encontrado: $(node --version)"
    
    # Verificar se npm est√° dispon√≠vel
    if ! command -v npm &> /dev/null; then
        echo "‚ùå npm n√£o encontrado"
        return 1
    fi
    
    echo "üì¶ npm encontrado: $(npm --version)"
    
    # Verificar se os arquivos principais do React existem
    if [ ! -f "frontend/src/App.tsx" ]; then
        echo "‚ö†Ô∏è  frontend/src/App.tsx n√£o encontrado"
    else
        echo "‚úÖ App.tsx encontrado"
    fi
    
    if [ ! -f "frontend/vite.config.ts" ]; then
        echo "‚ö†Ô∏è  frontend/vite.config.ts n√£o encontrado"
    else
        echo "‚úÖ vite.config.ts encontrado"
    fi
    
    echo "‚úÖ Frontend - Verifica√ß√µes b√°sicas conclu√≠das"
}

# Fun√ß√£o para testar deploy
test_deploy() {
    echo "üß™ Testando Deploy..."
    echo "üìÅ Verificando arquivos de deploy..."
    
    # Verificar se vercel.json existe
    if [ ! -f "frontend/vercel.json" ]; then
        echo "‚ö†Ô∏è  frontend/vercel.json n√£o encontrado"
    else
        echo "‚úÖ vercel.json encontrado"
    fi
    
    # Verificar se Procfile existe
    if [ ! -f "Procfile" ]; then
        echo "‚ö†Ô∏è  Procfile n√£o encontrado"
    else
        echo "‚úÖ Procfile encontrado"
    fi
    
    # Verificar se runtime.txt existe
    if [ ! -f "runtime.txt" ]; then
        echo "‚ö†Ô∏è  runtime.txt n√£o encontrado"
    else
        echo "‚úÖ runtime.txt encontrado"
    fi
    
    # Verificar se requirements-render.txt existe
    if [ ! -f "requirements-render.txt" ]; then
        echo "‚ö†Ô∏è  requirements-render.txt n√£o encontrado"
    else
        echo "‚úÖ requirements-render.txt encontrado"
    fi
    
    echo "‚úÖ Deploy - Verifica√ß√µes b√°sicas conclu√≠das"
}

# Verificar argumentos
if [ $# -eq 0 ]; then
    echo "‚ùå Nenhuma op√ß√£o especificada"
    show_help
    exit 1
fi

case $1 in
    "backend")
        test_backend
        ;;
    "frontend")
        test_frontend
        ;;
    "deploy")
        test_deploy
        ;;
    "all")
        echo "üß™ Testando Tudo..."
        test_backend
        echo ""
        test_frontend
        echo ""
        test_deploy
        ;;
    "help"|"-h"|"--help")
        show_help
        ;;
    *)
        echo "‚ùå Op√ß√£o inv√°lida: $1"
        show_help
        exit 1
        ;;
esac

echo ""
echo "‚úÖ Teste conclu√≠do!"
echo ""
echo "üí° Para instalar o act-cli e testar os workflows completos:"
echo "   Windows (PowerShell como Admin): Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1')); choco install act-cli"
echo "   Ou baixe manualmente: https://github.com/nektos/act/releases" 