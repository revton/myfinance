"""create_user_profiles_table

Revision ID: 9feb93f37ce2
Revises: 0001
Create Date: 2025-08-01 19:03:34.680305

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '9feb93f37ce2'
down_revision = '0001'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('transactions', 'id',
               existing_type=sa.UUID(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('transactions', 'type',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.String(length=10),
               existing_nullable=False)
    op.alter_column('transactions', 'amount',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               type_=sa.Float(),
               existing_nullable=False)
    
    # ### Criar tabela user_profiles ###
    op.create_table('user_profiles',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('email', sa.String(length=255), nullable=False),
        sa.Column('full_name', sa.String(length=255), nullable=True),
        sa.Column('avatar_url', sa.Text(), nullable=True),
        sa.Column('timezone', sa.String(length=50), nullable=False, server_default='America/Sao_Paulo'),
        sa.Column('currency', sa.String(length=3), nullable=False, server_default='BRL'),
        sa.Column('language', sa.String(length=5), nullable=False, server_default='pt-BR'),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('user_id'),
        sa.CheckConstraint("timezone IN ('America/Sao_Paulo', 'UTC', 'America/New_York', 'Europe/London')", name='check_valid_timezone'),
        sa.CheckConstraint("currency IN ('BRL', 'USD', 'EUR', 'GBP')", name='check_valid_currency'),
        sa.CheckConstraint("language IN ('pt-BR', 'en-US', 'es-ES')", name='check_valid_language'),
        sa.CheckConstraint("length(email) >= 3", name='check_email_length'),
        sa.CheckConstraint("length(full_name) <= 255", name='check_full_name_length')
    )
    op.create_index('idx_user_profiles_user_id', 'user_profiles', ['user_id'], unique=False)
    op.create_index('idx_user_profiles_email', 'user_profiles', ['email'], unique=False)
    op.create_index('idx_user_profiles_created_at', 'user_profiles', ['created_at'], unique=False)
    
    # ### Configurar RLS (Row Level Security) para Supabase ###
    # Habilitar RLS na tabela
    op.execute("ALTER TABLE user_profiles ENABLE ROW LEVEL SECURITY;")
    
    # Criar política para usuários autenticados poderem ver apenas seus próprios perfis
    op.execute("""
        CREATE POLICY \"Users can view own profile\" ON user_profiles
        FOR SELECT USING (auth.uid()::text = user_id::text);
    """)
    
    # Criar política para usuários autenticados poderem inserir seus próprios perfis
    op.execute("""
        CREATE POLICY \"Users can insert own profile\" ON user_profiles
        FOR INSERT WITH CHECK (auth.uid()::text = user_id::text);
    """)
    
    # Criar política para usuários autenticados poderem atualizar seus próprios perfis
    op.execute("""
        CREATE POLICY \"Users can update own profile\" ON user_profiles
        FOR UPDATE USING (auth.uid()::text = user_id::text);
    """)
    
    # Criar política para usuários autenticados poderem deletar seus próprios perfis
    op.execute("""
        CREATE POLICY \"Users can delete own profile\" ON user_profiles
        FOR DELETE USING (auth.uid()::text = user_id::text);
    """)
    
    # ### Sincronizar com PostgREST (Supabase) ###
    # Notificar PostgREST sobre a nova tabela
    op.execute("NOTIFY pgrst, 'reload schema';")
    
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Remover políticas RLS
    op.execute("DROP POLICY IF EXISTS \"Users can view own profile\" ON user_profiles;")
    op.execute("DROP POLICY IF EXISTS \"Users can insert own profile\" ON user_profiles;")
    op.execute("DROP POLICY IF EXISTS \"Users can update own profile\" ON user_profiles;")
    op.execute("DROP POLICY IF EXISTS \"Users can delete own profile\" ON user_profiles;")
    
    # Desabilitar RLS
    op.execute("ALTER TABLE user_profiles DISABLE ROW LEVEL SECURITY;")
    
    op.drop_index('idx_user_profiles_created_at', table_name='user_profiles')
    op.drop_index('idx_user_profiles_email', table_name='user_profiles')
    op.drop_index('idx_user_profiles_user_id', table_name='user_profiles')
    op.drop_table('user_profiles')
    
    op.alter_column('transactions', 'amount',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=10, scale=2),
               existing_nullable=False)
    op.alter_column('transactions', 'type',
               existing_type=sa.String(length=10),
               type_=sa.VARCHAR(length=20),
               existing_nullable=False)
    op.alter_column('transactions', 'id',
               existing_type=sa.UUID(),
               server_default=sa.text('gen_random_uuid()'),
               existing_nullable=False)
    # ### end Alembic commands ###